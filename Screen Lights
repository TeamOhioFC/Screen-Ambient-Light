import java.awt.Color;
import java.awt.Dimension;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Rectangle;
import java.awt.Robot;
import java.awt.Toolkit;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
import java.util.*;


public class ScreenLights
{
    //Class Variables
	
	//Screen Shot
	BufferedImage screenShot;
	
	//Color Values
    int r;
    int g;
    int b;
    
    //Screen Dimensions
    int width;
    int height;
    
    //Number of LED lights
    int XnumLEDLights;
    int YnumLEDLights;
    
    //Matrixes
    int[][] xLeft = new int[15][3];
    int[][] xRight = new int[15][3];
    
    int[][] yTop = new int[15][3];
    int[][] yBottom = new int[15][3];
    
    //Construct
    public ScreenLights(){
    	
    	//Screen Resolution
    	//For MultiMonitor
    	GraphicsDevice gd = GraphicsEnvironment.getLocalGraphicsEnvironment().getDefaultScreenDevice();
    	width = gd.getDisplayMode().getWidth();
    	height = gd.getDisplayMode().getHeight();
    	
    	/* For Single Monitor
        Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();
        width = (int) screenSize.getWidth();
        height = (int) screenSize.getHeight();
        */
    }
    
    //Get Methods
    public BufferedImage getImage(){
    	return screenShot;
    }
    
    public int getRed(){
    	return r;
    }
    
    public int getGreen(){
    	return g;
    }
    
    public int getBlue(){
    	return b;
    }
    
    public int[][] getxLeft(){
    	return xLeft;
    }
    
    public int[][] getxRight(){
    	return xRight;
    }
    
    public int[][] getyTop(){
    	return yTop;
    }
    
    public int[][] getyBottom(){
    	return yBottom;
    }
    
    //Take new screenShot
    public void refreshRobo() throws Exception{
        Robot robot = new Robot();
        screenShot = robot.createScreenCapture(new Rectangle(Toolkit.getDefaultToolkit().getScreenSize()));
    }
    
    //Analyze Image for the RGB values
    public void analyzeImage(){
    	//Reset values
        r=0;
        g=0;
        b=0;
    	
    	//Skip every alternate pixel making my program 4 times faster
    	for(int i =0;i<width; i=i+2){
    		for(int j=0; j<height;j=j+2){
    			int pixel = screenShot.getRGB(i,j); //the ARGB integer has the colors of pixel (i,j)
    			r = r+(int)(255&(pixel>>16)); //add up reds
    			g = g+(int)(255&(pixel>>8)); //add up greens
    			b = b+(int)(255&(pixel)); //add up blues
    		}
    	}
    	
    	r = r/(int)((width/2)*(height/2));
    	g = g/(int)((width/2)*(height/2));
    	b = b/(int)((width/2)*(height/2));
    	
    }
    
    //Analyze Image for the RGB values on portion of image. Input is percent screen 
    	//(i.e. (0,50,0,10) is first percent of screen and ten percent from bottom
    public int[] analyzePartOfImage(int xBegin, int xEnd, int yBegin, int yEnd){
    	//Reset values
    	int[] RGBValues = new int[3];
    	r=0;
        g=0;
        b=0;
        
        //Find Pixel Start and End
        int xBeginPixel = (xBegin/100)*width;
    	int xEndPixel = (int) ( (double) (xEnd)/100*width);
        
    	int yBeginPixel = (int) ( (double) (yBegin)/100*height);
        int yEndPixel = (int) ( (double) (yEnd)/100*height);
        
        //Skip Pixels to speed up process (i.e. skip by 2 makes it 4x faster)
        int skipTime = 2;
        
    	for(int i = 0; i < (xEndPixel-xBeginPixel); i=i+skipTime){
    		for(int j = 0; j < (yEndPixel-yBeginPixel); j=j+skipTime){
    			int pixel = screenShot.getRGB(i,j); //the ARGB integer has the colors of pixel (i,j)
    			r = r+(int)(255&(pixel>>16)); //add up reds
    			g = g+(int)(255&(pixel>>8)); //add up greens
    			b = b+(int)(255&(pixel)); //add up blues
    		}
    	}

    	int numPixels = ((xEndPixel-xBeginPixel)/skipTime)*((yEndPixel-yBeginPixel)/skipTime);
    	
    	
    	RGBValues[0] = (r/numPixels);
    	RGBValues[1] = (g/numPixels);
    	RGBValues[2] = (b/numPixels);
    	
    	return RGBValues;
    }
    
    public void YSectionLEDStrip(){
    	int yPercent = 15;
    	
    	int YnumLEDLights = 10; //10 LED lights
    	int percentStep = YnumLEDLights;
    	int start;

    	int[] temp = new int[3];
    	
    	for(int i = 0; i < YnumLEDLights; i++){
    		start = (i+1)*percentStep;
    		//Top Section
    		temp = analyzePartOfImage(start, start+percentStep, 100-yPercent, 100);
    		yTop[i][0] = temp[0];
    		yTop[i][1] = temp[1];
    		yTop[i][2] = temp[2];
    		
    		//Bottom Section
    		temp = analyzePartOfImage(start, start+percentStep, 0, yPercent); 
    		yBottom[i][0] = temp[0];
    		yBottom[i][1] = temp[1];
    		yBottom[i][2] = temp[2];
    	}
    	
    }
    
    public void XSectionLEDStrip(){
    	int xPercent = 15;
    	
    	int XnumLEDLights = 10; //10 LED lights
    	int percentStep = XnumLEDLights;
    	int start;

    	int[] temp = new int[3];
    	
    	for(int i = 0; i < XnumLEDLights; i++){
    		start = (i+1)*percentStep;
    		//Right Section
    		temp = analyzePartOfImage(100-xPercent, 100, start, start+percentStep);
    		xRight[i][0] = temp[0];
    		xRight[i][1] = temp[1];
    		xRight[i][2] = temp[2];
    		
    		//Left Section
    		temp = analyzePartOfImage(0, xPercent, start, start+percentStep);
    		xLeft[i][0] = temp[0];
    		xLeft[i][1] = temp[1];
    		xLeft[i][2] = temp[2];
    	}
    	
    }
    
    public void printArray(){
    	boolean s = false;
    	System.out.println("xLeft");
    	for (int i=0; i < xLeft.length; i++){
    		for (int j=0; j < xLeft[0].length; j++){
    			if (xLeft[i][j] != 0)
    				System.out.print(xLeft[i][j]+" | ");
    			else
    				s = true;
    			
    		}
    		if (!s)
    			System.out.println("");
    		s = false;
    	}
    	System.out.println("");
    	//--------------------
    	
    	System.out.println("xRight");
    	for (int i=0; i < xRight.length; i++){
    		for (int j=0; j < xRight[0].length; j++){
    			if (xRight[i][j] != 0)
    				System.out.print(xRight[i][j]+" | ");
    			else
    				s = true;
    		}
    		if (!s)
    			System.out.println("");
    		s = false;
    	}
    	System.out.println("");
    	//------------------
    	
    	System.out.println("yTop");
    	for (int i=0; i < yTop.length; i++){
    		for (int j=0; j < yTop[0].length; j++){
    			if (yTop[i][j] != 0)
    				System.out.print(yTop[i][j]+" | ");
    			else
    				s = true;
    		}
    		if (!s)
    			System.out.println("");
    		s = false;
    	}
    	System.out.println("");
    	//--------------------
    	
    	System.out.println("yBottom");
    	for (int i=0; i < yBottom.length; i++){
    		for (int j=0; j < yBottom[0].length; j++){
    			if (yBottom[i][j] != 0)
    				System.out.print(yBottom[i][j]+" | ");
    			else
    				s = true;
    		}
    		if (!s)
    			System.out.println("");
    		s = false;
    	}
    	System.out.println("");
    	//--------------------
    	
    	/*
    	System.out.println(xLeft.length);
    	System.out.println(xRight.length);
    	System.out.println(yTop.length);
    	System.out.println(yBottom.length);
    	*/
    }
    
    public void runAll() throws Exception{
    	this.refreshRobo();
        this.XSectionLEDStrip();
        this.YSectionLEDStrip();
    }
    
    public void sentToArduino(){
    	//Send Data to Arduino Nano
    }

    public static void main(String[] args) throws Exception
    {
    	ScreenLights test = new ScreenLights();
        while(true)
        {	
            test.runAll();
        	test.printArray();
            
            Thread.sleep(10000);
        }
    }
}
/*
So it works! Now need to make a better array storage
*/
